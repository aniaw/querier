{"version":3,"file":"querier.umd.js","sources":["../src/QuerierLogger.ts","../src/types.ts","../src/QuerierProvider.tsx","../src/utils/buildQueryKey.ts","../src/utils/queryDescriptorBuilders.ts","../src/withDataFactory.tsx","../src/withData.tsx","../src/utils/combineStates.ts","../src/Querier.ts"],"sourcesContent":["export class QuerierLogger {\n  // tslint:disable-next-line\n  private logs: Array<any> = [];\n\n  public log(label: string, data?: {}) {\n    if (process.env.NODE_ENV === 'development') {\n      console.groupCollapsed('Querier: ' + label);\n      // tslint:disable-next-line\n      console.info(data);\n      console.groupEnd();\n    }\n  }\n}\n","// tslint:disable:no-any\nimport { Action, ActionFunction1 } from 'redux-actions';\nimport { ComponentClass, ComponentType } from 'react';\n\n// Diff / Omit taken from https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-311923766\nexport type Diff<T extends string, U extends string> = ({ [P in T]: P } &\n  { [P in U]: never } & { [x: string]: never })[T];\nexport type Omit<T, K extends keyof T> = Pick<T, Diff<keyof T, K>>;\n\nexport type InputQuery<TProps, TResult> = (props: TProps) => Promise<TResult>;\nexport type ActionQuery<TResult> = (...args: any[]) => Promise<TResult>;\n\nexport type ResultActions<T> = Array<ActionFunction1<T, Action<T>>>;\n\nexport type InputQueriesDescriptor<TProps, TInputQueries> = {\n  [TProp in keyof TInputQueries]: {\n    query: InputQuery<TProps, TInputQueries[TProp]>;\n    resultActions?: ResultActions<TInputQueries[TProp]>;\n    hot?: boolean;\n    $result?: TInputQueries[TProp];\n  }\n};\n\nexport type ActionQueriesDescriptor<TActionQueries> = {\n  [TProp in keyof TActionQueries]: {\n    query: ActionQuery<TActionQueries[TProp]>;\n    resultActions?: ResultActions<TActionQueries[TProp]>;\n    hot?: boolean;\n    $result?: TActionQueries[TProp];\n  }\n};\n\nexport type DataDependenciesDescriptor<\n  TProps,\n  TInputQueries,\n  TActionQueries\n> = {\n  inputQueries?: InputQueriesDescriptor<TProps, TInputQueries>;\n  actionQueries?: ActionQueriesDescriptor<TActionQueries>;\n};\n\nexport type WrappedInputQueries<TProps, TInputQueries> = {\n  [TProp in keyof TInputQueries]: {\n    query: InputQuery<TProps, TInputQueries[TProp]>;\n    resultActions?: ResultActions<TInputQueries[TProp]>;\n    hot: boolean;\n    key: string;\n  }\n};\n\nexport type WrappedActionQueries<TActionQueries> = {\n  [TProp in keyof TActionQueries]: {\n    query: ActionQuery<TActionQueries[TProp]>;\n    resultActions?: ResultActions<TActionQueries[TProp]>;\n    hot: boolean;\n    key: string;\n  }\n};\n\nexport type InputQueriesResults<TInputQueries> = {\n  [TProp in keyof TInputQueries]: TInputQueries[TProp] | null\n};\n\nexport type ActionQueriesProps<TActionQueries> = {\n  [TProp in keyof TActionQueries]: (\n    ...args: any[]\n  ) => Promise<TActionQueries[TProp]>\n};\n\nexport type InjectedStates<TInputQueries, TActionQueries> = {\n  [P in keyof TActionQueries]: QueryStateType\n} &\n  { [P in keyof TInputQueries]: QueryStateType };\n\nexport type InjectedResults<\n  TInputQueries,\n  TActionQueries\n> = InputQueriesResults<TInputQueries> & InputQueriesResults<TActionQueries>;\n\nexport type WithDataProps<TProps, TInputQueries, TActionQueries> = {\n  [P in keyof TProps]: TProps[P]\n} & {\n  results: InjectedResults<TInputQueries, TActionQueries>;\n  actionQueries: ActionQueriesProps<TActionQueries>;\n  states: InjectedStates<TInputQueries, TActionQueries>;\n};\n\n// Inspired by react-redux\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react-redux/index.d.ts#L47\nexport interface InferableComponentEnhancer<\n  TProps,\n  TInputQueries,\n  TActionQueries\n> {\n  (\n    component: ComponentType<\n      WithDataProps<TProps, TInputQueries, TActionQueries>\n    >\n  ): ComponentClass<TProps>;\n}\n\n// Querier specific types\nexport type QuerierQuery<TResult> = () => Promise<TResult>;\n\nexport type QuerierQueryDescriptor<TResult> = {\n  query: QuerierQuery<TResult>;\n  queryKey: string;\n  hot?: boolean;\n  props?: {};\n  effects?: ResultActions<TResult>;\n  reason?: string;\n};\n\nexport enum QuerierState {\n  Pending = 0,\n  Active,\n  Success,\n  Error\n}\n\nexport type QueryStateType = {\n  state: QuerierState;\n  error?: {};\n};\n\nexport type QuerierStateEntry<TResult> = {\n  id: string;\n  result: TResult | null;\n  state: QueryStateType;\n  // tslint:disable-next-line\n  $props: any;\n  $reason: string | null;\n};\n\nexport type QuerierStoreType = {\n  [key: string]: QuerierStateEntry<{}>;\n};\n\nexport interface QuerierType {\n  sendQuery: <T>(queryDescriptor: QuerierQueryDescriptor<T>) => void;\n  subscribe: (queryKey: string, listener: Function) => () => void;\n  getStore: () => QuerierStoreType;\n  getEntry: (key: string) => QuerierStateEntry<{}> | null;\n}\n\nexport type StatesType = {\n  [key: string]: QueryStateType;\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport Querier from './Querier';\nimport { QuerierType } from './types';\n\nexport interface QuerierProviderContext {\n  querier: QuerierType;\n}\n\nexport interface QuerierProviderProps {\n  children: JSX.Element;\n  querier?: QuerierType;\n}\n\nexport class QuerierProvider extends React.Component<QuerierProviderProps, {}> {\n  static childContextTypes = {\n    querier: PropTypes.object\n  };\n\n  private querier: QuerierType;\n\n  constructor(props: QuerierProviderProps) {\n    super(props);\n    this.querier = props.querier || new Querier();\n  }\n\n  getChildContext(): QuerierProviderContext {\n    return {\n      querier: this.querier\n    };\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n","// tslint:disable-next-line\nexport const buildQueryKey = (query: Function, props?: any) => {\n  if (props) {\n    return `${query.name}:${JSON.stringify(props)}`;\n  } else {\n    return `${query.name}`;\n  }\n};\n","import {\n  InputQueriesDescriptor,\n  WrappedInputQueries,\n  ActionQueriesDescriptor,\n  WrappedActionQueries\n} from '../types';\nimport { buildQueryKey } from './buildQueryKey';\n\nexport const inputQueryDescriptorsBuilder = <TProps, TInputQueries>(\n  inputQueries: InputQueriesDescriptor<TProps, TInputQueries>\n) => {\n  let wrappedInputQueries: Partial<\n    WrappedInputQueries<TProps, TInputQueries>\n  > = {};\n\n  for (let inputQueryProp in inputQueries) {\n    if (inputQueryProp) {\n      const query = inputQueries[inputQueryProp].query;\n      const wrappedQuery = (props: TProps) => query(props);\n\n      const queryKey = buildQueryKey(query);\n      let wrappedQueryDescriptor: Partial<\n        WrappedInputQueries<TProps, TInputQueries>\n      > = {};\n\n      wrappedQueryDescriptor[inputQueryProp] = {\n        query: wrappedQuery,\n        hot: !!inputQueries[inputQueryProp].hot,\n        resultActions: inputQueries[inputQueryProp].resultActions,\n        key: queryKey\n      };\n      wrappedInputQueries = Object.assign(\n        {},\n        wrappedInputQueries,\n        wrappedQueryDescriptor\n      );\n    }\n  }\n\n  return wrappedInputQueries as WrappedInputQueries<TProps, TInputQueries>;\n};\n\nexport const actionQueryDescriptorsBuilder = <TActionQueries>(\n  actionQueries: ActionQueriesDescriptor<TActionQueries>\n) => {\n  let wrappedActionQueries: Partial<WrappedActionQueries<TActionQueries>> = {};\n\n  for (let actionQueryProp in actionQueries) {\n    if (actionQueryProp) {\n      const query = actionQueries[actionQueryProp].query;\n      // tslint:disable-next-line\n      const wrappedQuery = (...args: any[]) => query(...args);\n\n      let queryDescriptor: Partial<WrappedActionQueries<TActionQueries>> = {};\n\n      queryDescriptor[actionQueryProp] = {\n        query: wrappedQuery,\n        hot: !!actionQueries[actionQueryProp].hot,\n        key: buildQueryKey(actionQueries[actionQueryProp].query)\n      };\n\n      wrappedActionQueries = Object.assign(\n        {},\n        wrappedActionQueries,\n        queryDescriptor\n      );\n    }\n  }\n\n  return wrappedActionQueries as WrappedActionQueries<TActionQueries>;\n};\n","import * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { QuerierProviderContext } from './QuerierProvider';\nimport {\n  ActionQueriesProps,\n  InjectedResults,\n  InjectedStates,\n  QuerierStateEntry,\n  WithDataProps,\n  WrappedActionQueries,\n  WrappedInputQueries,\n  InferableComponentEnhancer,\n} from './types';\n\n// tslint:disable-next-line\nconst getComponentDisplayName = (wrapped: React.ComponentType<any>) => {\n  return wrapped.displayName || wrapped.name || 'Component';\n};\n\nexport const withDataFactory = <TProps, TInputQueries, TActionQueries>(\n  queries: {\n    inputQueries?: WrappedInputQueries<TProps, TInputQueries> | null;\n    actionQueries?: WrappedActionQueries<TActionQueries>;\n  }\n): InferableComponentEnhancer<TProps, TInputQueries, TActionQueries> => (\n  Component: React.ComponentType<WithDataProps<TProps, TInputQueries, TActionQueries>>) => {\n  class WithData extends React.Component<TProps> {\n    static displayName = `WithData(${getComponentDisplayName(Component)})`;\n\n    static contextTypes = {\n      querier: PropTypes.object\n    };\n\n    context: QuerierProviderContext;\n\n    private querierSubscriptions: Array<() => void> = [];\n    private propsToQueryKeysMap: Map<string, string> = new Map();\n\n    constructor(props: TProps) {\n      super(props);\n      this.handleQuerierUpdate = this.handleQuerierUpdate.bind(this);\n      this.initializePropsToQueryKeysMap();\n    }\n\n    componentDidMount() {\n      this.fireInputQueries(this.props);\n    }\n\n    componentWillReceiveProps(nextProps: TProps) {\n      this.unsubscribeQuerier();\n      this.fireInputQueries(nextProps);\n    }\n\n    componentWillUnmount() {\n      this.unsubscribeQuerier();\n    }\n\n    initializePropsToQueryKeysMap() {\n      const { inputQueries } = queries;\n\n      if (inputQueries) {\n        for (let prop in inputQueries) {\n          if (prop) {\n            const queryKey = `${inputQueries[prop].key}:${JSON.stringify(this.props)}`;\n            this.propsToQueryKeysMap.set(prop, queryKey);\n          }\n        }\n      }\n    }\n\n    fireInputQueries(props: TProps) {\n      const { querier } = this.context;\n      const { inputQueries } = queries;\n      if (inputQueries) {\n        for (let prop in inputQueries) {\n          if (prop) {\n            const query = () => inputQueries[prop].query(props);\n            const queryKey = `${inputQueries[prop].key}:${JSON.stringify(props)}`;\n\n            this.propsToQueryKeysMap.set(prop, queryKey);\n\n            this.querierSubscriptions.push(querier.subscribe(queryKey, this.handleQuerierUpdate));\n\n            querier.sendQuery({\n              query,\n              queryKey,\n              props,\n              reason: getComponentDisplayName(Component),\n              effects: inputQueries[prop].resultActions,\n              hot: !!inputQueries[prop].hot,\n            });\n          }\n        }\n      }\n    }\n\n    unsubscribeQuerier() {\n      this.querierSubscriptions = this.querierSubscriptions.filter((unsubscribe) => {\n        return unsubscribe();\n      });\n    }\n\n    handleQuerierUpdate(queryData: QuerierStateEntry<{}>) {\n      this.setState({});\n    }\n\n    buildComponentPropsFromResults() {\n      let props = {\n        results: {},\n        states: {}\n      };\n      this.propsToQueryKeysMap.forEach((queryKey, prop) => {\n        const queryStoreEntry = this.context.querier.getEntry(queryKey);\n        const result: {\n          [key: string]: {} | null\n        } = {};\n        const states: {\n          [key: string]: {} | null\n        } = {};\n        result[prop] = queryStoreEntry && queryStoreEntry.result;\n        states[prop] = queryStoreEntry && queryStoreEntry.state;\n\n        props = {\n          results: {\n            ...props.results,\n            ...result,\n          },\n          states: {\n            ...props.states,\n            ...states,\n          }\n        };\n      });\n      // console.log(props);\n      return props as {\n        results: InjectedResults<TInputQueries, TActionQueries>,\n        states: InjectedStates<TInputQueries, TActionQueries>\n      };\n    }\n\n    getWrappedActionQueries() {\n      const { actionQueries } = queries;\n      const { querier } = this.context;\n      let wrappedActionQueries = {};\n\n      if (actionQueries) {\n        for (let actionQueryProp in actionQueries) {\n          if (actionQueryProp) {\n            const wrappedActionQuery: {\n              [key: string]: <TArgs>(args: TArgs) => void\n            } = {};\n\n            wrappedActionQuery[actionQueryProp] = (actionQueryParams) => {\n              const query = () => actionQueries[actionQueryProp].query(actionQueryParams);\n              const queryKey = `${actionQueries[actionQueryProp].key}:${JSON.stringify(actionQueryParams)}`;\n              this.propsToQueryKeysMap.set(actionQueryProp, queryKey);\n\n              querier.subscribe(queryKey, this.handleQuerierUpdate);\n              querier.sendQuery({\n                query,\n                queryKey,\n                hot: actionQueries[actionQueryProp].hot,\n                props: actionQueryParams,\n                reason: getComponentDisplayName(Component)\n              });\n            };\n\n            wrappedActionQueries = {\n              ...wrappedActionQueries,\n              ...wrappedActionQuery\n            };\n          }\n        }\n      }\n      return wrappedActionQueries as ActionQueriesProps<TActionQueries>;\n    }\n\n    render() {\n      const {\n        results,\n        states,\n      } = this.buildComponentPropsFromResults();\n\n      return (\n        <Component\n          results={results}\n          actionQueries={this.getWrappedActionQueries()}\n          states={states}\n          {...this.props}\n        />\n      );\n\n    }\n  }\n\n  return WithData;\n};\n","import {\n  actionQueryDescriptorsBuilder,\n  inputQueryDescriptorsBuilder\n} from './utils/queryDescriptorBuilders';\nimport { withDataFactory } from './withDataFactory';\nimport { DataDependenciesDescriptor, InferableComponentEnhancer } from './types';\n\nexport function withData<TProps, TInputQueries, TActionQueries>(\n  dependencies: DataDependenciesDescriptor<TProps, TInputQueries, TActionQueries>\n): InferableComponentEnhancer<TProps, TInputQueries, TActionQueries> {\n  const { actionQueries } = dependencies;\n\n  const inputQueriesDescriptor = dependencies.inputQueries &&\n    inputQueryDescriptorsBuilder(dependencies.inputQueries);\n\n  const actionQueriesDescriptor = actionQueries &&\n    actionQueryDescriptorsBuilder(actionQueries);\n\n  return withDataFactory<\n    TProps,\n    TInputQueries,\n    TActionQueries\n    >({\n      inputQueries: inputQueriesDescriptor,\n      actionQueries: actionQueriesDescriptor,\n    });\n}\n","import { StatesType, QuerierState, QueryStateType } from '../types';\n\nexport const combineStates = (states: StatesType): QueryStateType => {\n  let successes = 0;\n\n  for (let key in states) {\n    if (key && states[key]) {\n      if (states[key].state === QuerierState.Active) {\n        return {\n          state: QuerierState.Active\n        };\n      }\n      if (states[key].state === QuerierState.Error) {\n        return {\n          state: QuerierState.Error,\n          error: states[key].error\n        };\n      }\n      if (states[key].state === QuerierState.Success) {\n        successes++;\n      }\n    }\n  }\n\n  if (successes === Object.keys(states).length) {\n    return {\n      state: QuerierState.Success\n    };\n  }\n\n  return {\n    state: QuerierState.Pending\n  };\n};\n","import { QuerierLogger } from './QuerierLogger';\nimport {\n  QuerierQueryDescriptor,\n  QuerierState,\n  QuerierStoreType,\n  QuerierType\n} from './types';\nimport { Dispatch } from 'redux';\n\nclass Querier implements QuerierType {\n  private store: QuerierStoreType;\n  private listeners: Map<string, Array<Function>>;\n  private logger: QuerierLogger = new QuerierLogger();\n  private reduxDispatch: Dispatch<{}> | undefined;\n\n  // tslint:disable-next-line\n  constructor(store?: any, dispatch?: Dispatch<{}>) {\n    this.store = store || {};\n    this.listeners = new Map();\n    this.reduxDispatch = dispatch;\n\n    this.sendQuery = this.sendQuery.bind(this);\n    this.notify = this.notify.bind(this);\n    this.subscribe = this.subscribe.bind(this);\n    this.getEntry = this.getEntry.bind(this);\n  }\n\n  async sendQuery<TResult>(queryDescriptor: QuerierQueryDescriptor<TResult>) {\n    const { query, queryKey, effects, hot, props } = queryDescriptor;\n    const possibleQueryResult = this.store[queryKey];\n    if (\n      !!!hot &&\n      possibleQueryResult &&\n      (possibleQueryResult.result ||\n        possibleQueryResult.state.state === QuerierState.Active)\n    ) {\n      this.logger.log('Serving query from cache', possibleQueryResult);\n      this.notify(queryKey);\n      return;\n    }\n\n    let queryState: QuerierStoreType = {};\n\n    queryState[queryKey] = {\n      id: queryKey,\n      result: null,\n\n      state: {\n        state: QuerierState.Active\n      },\n      $props: props,\n      $reason: queryDescriptor.reason || null\n    };\n\n    this.store = {\n      ...this.store,\n      ...queryState\n    };\n\n    this.notify(queryKey);\n\n    try {\n      this.logger.log('Sending query', { ...queryState[queryKey] });\n      const result = await query();\n      queryState[queryKey] = {\n        ...queryState[queryKey],\n        result,\n        state: {\n          state: QuerierState.Success\n        }\n      };\n\n      this.store = {\n        ...this.store,\n        ...queryState\n      };\n\n      this.logger.log('Query succeeded', { ...queryState[queryKey] });\n\n      if (effects && this.reduxDispatch) {\n        this.logger.log('Performing query effects', { ...effects });\n        const dispatch = this.reduxDispatch;\n        effects.forEach(effect => {\n          dispatch(effect(result));\n        });\n      }\n\n      this.notify(queryKey);\n    } catch (e) {\n      queryState[queryKey] = {\n        ...queryState[queryKey],\n        result: null,\n        state: {\n          state: QuerierState.Error,\n          error: e\n        }\n      };\n      this.store = {\n        ...this.store,\n        ...queryState\n      };\n      this.logger.log('Query failed', { ...queryState[queryKey] });\n      this.notify(queryKey);\n    }\n  }\n\n  getStore() {\n    return this.store;\n  }\n\n  getEntry(key: string) {\n    if (this.getStore()[key]) {\n      return this.getStore()[key];\n    }\n    return null;\n  }\n\n  subscribe(queryKey: string, listener: Function) {\n    // TODO: add typings\n    const listeners = this.listeners.get(queryKey);\n    this.listeners.set(\n      queryKey,\n      listeners ? [...listeners, listener] : [listener]\n    );\n\n    return () => {\n      const _listeners = this.listeners.get(queryKey);\n      if (_listeners) {\n        const index = _listeners.indexOf(listener);\n        this.listeners.set(queryKey, [\n          ..._listeners.slice(0, index),\n          ..._listeners.slice(index + 1, _listeners.length)\n        ]);\n      }\n    };\n  }\n\n  private notify(queryKey: string) {\n    const listeners = this.listeners.get(queryKey);\n    if (listeners) {\n      listeners.map(listener => listener(this.store[queryKey]));\n    }\n  }\n}\n\nexport default Querier;\n\nexport * from './types';\nexport * from './QuerierLogger';\nexport * from './QuerierProvider';\nexport * from './withData';\nexport * from './utils/combineStates';\nexport * from './utils/buildQueryKey';\n"],"names":["QuerierState","tslib_1.__extends","PropTypes.object","React.Component","Component","React.createElement"],"mappings":"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"}